/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Optimization {
  /**
   * Random 64-bit unique identifier for this optimization
   */
  id: string;
  /**
   * Human identifier, could be a nickname or a number. This may not be unique.
   */
  name: string;
  /**
   * Object representing parameters required by the selected optimizerType
   */
  customOptionsData: {
    [k: string]: number | string | boolean | null | unknown[];
  };
  /**
   * Synthetic game data that will be used by the optimization instead of a players historical data. This is useful for when there is a new player without any historical data.
   */
  overrideData: {
    /**
     * Plate appearances for a particular player
     */
    [k: string]: PlateAppearance[];
  };
  /**
   * Object containing the results of a simulation. Results can be partial (if the simulation is not in a terminal state) or final.
   */
  resultData: {
    [k: string]: unknown;
  };
  /**
   * Additional information about the current status. Intended for human consumption only.
   */
  statusMessage: string | null;
  /**
   * Whether or not the user would like to receive an email with the results ofter the optimization completes.
   */
  sendEmail: boolean;
  /**
   * Array containing an array of team ids for which data will be used by the optimizer
   */
  teamList: unknown[];
  /**
   * Array containing an array of game ids for which data will be used by the optimizer
   */
  gameList: unknown[];
  /**
   * Array containing an array of player ids that should be turned into an optimal lineup by the optimizer
   */
  playerList: unknown[];
  /**
   * The type of the lineup the optimizer should return. Different lineup types have different rules about what makes them valid (e.g. ALTERNATING_GENDER lineup must never bat two males or two females in a row)
   */
  lineupType: number;
  /**
   * The type of optimizer that should be used for this optimization. A list of optimizers and their descriptions can be found at https://optimizers.softball.app/
   */
  optimizerType: number;
  /**
   * object that contains a snapshot summary of the data that was sent to the optimizer when the optimization was started. Once the snapshot is taken, it does not change as the app's data changes.
   */
  inputSummaryData: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Information about an individual plate appearance
 */
export interface PlateAppearance {
  /**
   * Random 64-bit unique identifier for this plate appearance
   */
  id: string;
  /**
   * The id of the player who is the batter during the plate appearance
   */
  playerId: string;
  /**
   * The outcome of the plate appearance for the batter (e.g. BB, E, 1B, etc.)
   */
  result: string | null;
  /**
   * Location of runners after the conclusion of the plate appearance
   */
  runners?: {
    "1B"?: string;
    "2B"?: string;
    "3B"?: string;
    scored?: string[];
    /**
     * @maxItems 3
     */
    out?: [] | [string] | [string, string] | [string, string, string];
  };
  /**
   * Where the ball was hit
   */
  location: {
    /**
     * X coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the left
     */
    x: number | null;
    /**
     * Y coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the top
     */
    y: number | null;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
