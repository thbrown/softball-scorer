/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Complete schema for all the data associated with an account
 */
export interface TopLevelFull {
  /**
   * Information about the json document itself
   */
  metadata: {
    /**
     * The version schema version of the json document
     */
    version: number;
    /**
     * All account data is present
     */
    scope: "full";
    [k: string]: unknown;
  };
  account: Account & AccountPrivate & AccountReadOnly;
  /**
   * List of all players associated with this account
   */
  players: Player[];
  /**
   * List of all teams associated with this account
   */
  teams: (TeamReadOnly & Team)[];
  /**
   * List of all optimizations associated with this account
   */
  optimizations: (OptimizationReadOnly & Optimization)[];
  [k: string]: unknown;
}
/**
 * Account info that can be sent to the frontend/browser/client
 */
export interface Account {
  /**
   * A list of optimizer ids that the account has selected
   */
  optimizers: unknown[];
  [k: string]: unknown;
}
/**
 * Account info that should never be sent to the frontend/browser/client
 */
export interface AccountPrivate {
  /**
   * Account password hash
   */
  passwordHash: string;
  /**
   * Token used for email confirmation and/or password reset
   */
  passwordTokenHash: string;
  /**
   * When the passwordTokenHash expires and can no longer be sed to reset email or validate email address
   */
  passwordTokenExpiration: number;
  [k: string]: unknown;
}
/**
 * Account info that the frontend/browser/client can't modify through sync/patch
 */
export interface AccountReadOnly {
  /**
   * Random 64-bit unique identifier for this game
   */
  accountId: string;
  /**
   * Account's associate email
   */
  email: string;
  /**
   * Whether the email validation link has been clicked or not
   */
  emailConfirmed: boolean;
  /**
   * Number of optimizer credits the account has remaining
   */
  balance: number;
  [k: string]: unknown;
}
/**
 * Information a player
 */
export interface Player {
  /**
   * Random 64-bit unique identifier for this player
   */
  id: string;
  /**
   * Name of the player
   */
  name: string;
  /**
   * Gender of the player
   */
  gender: string;
  /**
   * Walkup song YouTube link
   */
  songLink: string | null;
  /**
   * Walkup song start time in seconds
   */
  songStart: number | null;
  [k: string]: unknown;
}
export interface TeamReadOnly {
  /**
   * Whether or not the stats for the team should be available at a public web address
   */
  publicIdEnabled?: boolean;
  /**
   * The unique identifier used to construct the public web address for this teams stats (if enabled)
   */
  publicId?: string;
  [k: string]: unknown;
}
export interface Team {
  /**
   * Random 64-bit unique identifier for this team
   */
  id: string;
  /**
   * Human identifier for this team. Opponent name is used by the app. May not be unique.
   */
  name: string;
  /**
   * All games played by this team
   */
  games: Game[];
  [k: string]: unknown;
}
/**
 * Information about an individual game
 */
export interface Game {
  /**
   * Random 64-bit unique identifier for this game
   */
  id: string;
  /**
   * Human identifier for the team. App prompts for the name of the opposing team. May not be unique.
   */
  opponent: string;
  /**
   * Epoch timestamp in seconds when the game was created, not necessarily played.
   */
  date: number;
  /**
   * Number of runs scored by this team in this game in each inning
   */
  scoreUs: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[0-9]+$".
     */
    [k: string]: number;
  };
  /**
   * Number of runs scored by this team's opponent in each inning
   */
  scoreThem: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[0-9]+$".
     */
    [k: string]: number;
  };
  /**
   * Batting lineup for this game
   */
  lineup: string[];
  /**
   * The type of the lineup used for this game. Typically this is a team-wide setting but specifying it under games allows for exceptions (e.g. tournaments w/ different rules). Different lineup types have different rules about what makes them valid (e.g. ALTERNATING_GENDER lineup must never bat two males or two females in a row)
   */
  lineupType: number;
  /**
   * All plate appearances that occurred during this game
   */
  plateAppearances: PlateAppearance[];
  [k: string]: unknown;
}
/**
 * Information about an individual plate appearance
 */
export interface PlateAppearance {
  /**
   * Random 64-bit unique identifier for this plate appearance
   */
  id: string;
  /**
   * The id of the player who is the batter during the plate appearance
   */
  playerId: string;
  /**
   * The outcome of the plate appearance for the batter (e.g. BB, E, 1B, etc.)
   */
  result: string | null;
  /**
   * Location of runners after the conclusion of the plate appearance
   */
  runners?: {
    "1B"?: string;
    "2B"?: string;
    "3B"?: string;
    scored?: string[];
    /**
     * @maxItems 3
     */
    out?: [] | [string] | [string, string] | [string, string, string];
  };
  /**
   * Where the ball was hit
   */
  location: {
    /**
     * X coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the left
     */
    x: number | null;
    /**
     * Y coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the top
     */
    y: number | null;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface OptimizationReadOnly {
  /**
   * Indicates what state the optimization is currently in e.g. NOT_STARTED, IN_PROGRESS, COMPLETE etc.
   */
  status?: number;
  /**
   * Whether the user has requested that the optimization be paused or not
   */
  pause?: boolean;
  [k: string]: unknown;
}
export interface Optimization {
  /**
   * Random 64-bit unique identifier for this optimization
   */
  id: string;
  /**
   * Human identifier, could be a nickname or a number. This may not be unique.
   */
  name: string;
  /**
   * Object representing parameters required by the selected optimizerType
   */
  customOptionsData: {
    [k: string]: number | number | string | boolean | null | unknown[];
  };
  /**
   * Synthetic game data that will be used by the optimization instead of a players historical data. This is useful for when there is a new player without any historical data.
   */
  overrideData: {
    /**
     * Plate appearances for a particular player
     */
    [k: string]: PlateAppearance1[];
  };
  /**
   * Object containing the results of a simulation. Results can be partial (if the simulation is not in a terminal state) or final.
   */
  resultData: {
    [k: string]: unknown;
  };
  /**
   * Additional information about the current status. Intended for human consumption only.
   */
  statusMessage: string | null;
  /**
   * Whether or not the user would like to receive an email with the results ofter the optimization completes.
   */
  sendEmail: boolean;
  /**
   * Array containing an array of team ids for which data will be used by the optimizer
   */
  teamList: unknown[];
  /**
   * Array containing an array of game ids for which data will be used by the optimizer
   */
  gameList: unknown[];
  /**
   * Array containing an array of player ids that should be turned into an optimal lineup by the optimizer
   */
  playerList: unknown[];
  /**
   * The type of the lineup the optimizer should return. Different lineup types have different rules about what makes them valid (e.g. ALTERNATING_GENDER lineup must never bat two males or two females in a row)
   */
  lineupType: number;
  /**
   * The type of optimizer that should be used for this optimization. A list of optimizers and their descriptions can be found at https://optimizers.softball.app/
   */
  optimizerType: number;
  /**
   * object that contains a snapshot summary of the data that was sent to the optimizer when the optimization was started. Once the snapshot is taken, it does not change as the app's data changes.
   */
  inputSummaryData: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Information about an individual plate appearance
 */
export interface PlateAppearance1 {
  /**
   * Random 64-bit unique identifier for this plate appearance
   */
  id: string;
  /**
   * The id of the player who is the batter during the plate appearance
   */
  playerId: string;
  /**
   * The outcome of the plate appearance for the batter (e.g. BB, E, 1B, etc.)
   */
  result: string | null;
  /**
   * Location of runners after the conclusion of the plate appearance
   */
  runners?: {
    "1B"?: string;
    "2B"?: string;
    "3B"?: string;
    scored?: string[];
    /**
     * @maxItems 3
     */
    out?: [] | [string] | [string, string] | [string, string, string];
  };
  /**
   * Where the ball was hit
   */
  location: {
    /**
     * X coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the left
     */
    x: number | null;
    /**
     * Y coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the top
     */
    y: number | null;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
