/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Data that gets downloaded when a user exports his/her data from the app. Notably excludes account information.
 */
export interface TopLevelExport {
  /**
   * Information about the json document itself
   */
  metadata: {
    /**
     * The version schema of the json document
     */
    version: number;
    /**
     * Export contains no account information and no optimizations.
     */
    scope: "export";
    [k: string]: unknown;
  };
  /**
   * List of all players associated with this account
   */
  players: Player[];
  /**
   * List of all teams associated with this account
   */
  teams: Team[];
  [k: string]: unknown;
}
/**
 * Information a player
 */
export interface Player {
  /**
   * Random 64-bit unique identifier for this player
   */
  id: string;
  /**
   * Name of the player
   */
  name: string;
  /**
   * Gender of the player
   */
  gender: string;
  /**
   * Walkup song YouTube link
   */
  songLink: string | null;
  /**
   * Walkup song start time in seconds
   */
  songStart: number | null;
  [k: string]: unknown;
}
export interface Team {
  /**
   * Random 64-bit unique identifier for this team
   */
  id: string;
  /**
   * Human identifier for this team. Opponent name is used by the app. May not be unique.
   */
  name: string;
  /**
   * All games played by this team
   */
  games: Game[];
  [k: string]: unknown;
}
/**
 * Information about an individual game
 */
export interface Game {
  /**
   * Random 64-bit unique identifier for this game
   */
  id: string;
  /**
   * Human identifier for the team. App prompts for the name of the opposing team. May not be unique.
   */
  opponent: string;
  /**
   * Epoch timestamp in seconds when the game was created, not necessarily played.
   */
  date: number;
  /**
   * Number of runs scored by this team in this game in each inning
   */
  scoreUs: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[0-9]+$".
     */
    [k: string]: number;
  };
  /**
   * Number of runs scored by this team's opponent in each inning
   */
  scoreThem: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[0-9]+$".
     */
    [k: string]: number;
  };
  /**
   * Batting lineup for this game
   */
  lineup: string[];
  /**
   * The type of the lineup used for this game. Typically this is a team-wide setting but specifying it under games allows for exceptions (e.g. tournaments w/ different rules). Different lineup types have different rules about what makes them valid (e.g. ALTERNATING_GENDER lineup must never bat two males or two females in a row)
   */
  lineupType: number;
  /**
   * All plate appearances that occurred during this game
   */
  plateAppearances: PlateAppearance[];
  [k: string]: unknown;
}
/**
 * Information about an individual plate appearance
 */
export interface PlateAppearance {
  /**
   * Random 64-bit unique identifier for this plate appearance
   */
  id: string;
  /**
   * The id of the player who is the batter during the plate appearance
   */
  playerId: string;
  /**
   * The outcome of the plate appearance for the batter (e.g. BB, E, 1B, etc.)
   */
  result: string | null;
  /**
   * Location of runners after the conclusion of the plate appearance
   */
  runners?: {
    "1B"?: string;
    "2B"?: string;
    "3B"?: string;
    scored?: string[];
    /**
     * @maxItems 3
     */
    out?: [] | [string] | [string, string] | [string, string, string];
  };
  /**
   * Where the ball was hit
   */
  location: {
    /**
     * X coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the left
     */
    x: number | null;
    /**
     * Y coordinate of where the ball was fielded (or where the ball ended at the end of the plate appearance if not fielded). Expressed as 32767ths of the field image from the top
     */
    y: number | null;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
